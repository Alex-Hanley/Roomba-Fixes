from irobot_edu_sdk.backend.bluetooth import Bluetooth
from irobot_edu_sdk.robots import event, hand_over, Color, Robot, Root, Create3
from irobot_edu_sdk.music import Note

# robot is the instance of the robot that will allow us to call
# its methods and to define events with the @event decorator.
robot = Create3(Bluetooth("XJ-9")) 

maxProximity = 100.00

bumper = False

def findMaxProximity(readings):
    maxProximity = readings[0]      # initialize maxProximity with the first value from the readings list.
    for read in readings:           # Loop through each reading in the readings list.
        if read > maxProximity:     # if the current reading is greater than the current maxProximity:
            maxProximity = read     # update maxProximity with the current reading.
    return maxProximity             # return the maximum proximity value found.

def calculate_proximity(ir_reading):
    return 4095 / (ir_reading + 1)

# LEFT BUTTON
@event(robot.when_touched, [True, False])  # User buttons: [(.), (..)]
async def when_left_button_touched(robot):
    global bumper
    bumper = True
    await robot.set_wheel_speeds(0, 0)
    await robot.set_lights(Robot.LIGHT_ON,Color(255,0,0))
    await robot.stop.sound()



# RIGHT BUTTON
@event(robot.when_touched, [False, True])  # User buttons: [(.), (..)]
async def when_right_button_touched(robot):
    global bumper
    bumper = True
    await robot.set_wheel_speeds(0, 0)
    await robot.set_lights(Robot.LIGHT_ON,Color(255,0,0))
    await robot.stop.sound()





# EITHER BUMPER
@event(robot.when_bumped, [True, True])  # [left, right]
async def when_either_bumped(robot):
    global bumper
    bumper = True
    await robot.set_wheel_speeds(0, 0)
    await robot.set_lights(Robot.LIGHT_ON,Color(255,0,0))
    await robot.stop.sound()
   
    


@event(robot.when_play)
async def avoidCollision(robot):
    global reading
    global readings
    global maxProximity
    global bumper
    await robot.set_wheel_speeds(8, 8)
    while True:
        reading = (await robot.get_ir_proximity()).sensors
        proximity = findMaxProximity(reading)
        proximity = calculate_proximity(proximity)
        if bumper == False:  
            if proximity <= 5:
                await robot.set_lights(Robot.LIGHT_ON,Color(255,0,0))
                await robot.set_wheel_speeds(0, 0)
                await robot.play_note(Note.D7, 1.00)
            if proximity >= 5 and proximity <= 30:
                await robot.set_wheel_speeds(1, 1)
                await robot.set_lights(Robot.LIGHT_BLINK,Color(255,165,0))
                for i in range(2):
                    await robot.play_note(Note.D6, 0.10)
                await robot.set_lights(Robot.LIGHT_BLINK,Color(255, 255, 0))
            if proximity >= 30 and proximity <= 100:
                await robot.set_wheel_speeds(4, 4)
                await robot.set_lights(Robot.LIGHT_BLINK,Color(255,255,0))
                for i in range(2):
                    await robot.play_note(Note.D5, 0.10)
            if proximity > 100:
                await robot.set_wheel_speeds(8, 8)
                await robot.set_lights(Robot.LIGHT_BLINK,Color(0, 128, 0))
        else:
            await robot.set_wheel_speeds(0, 0)
            await robot.set_lights(Robot.LIGHT_ON,Color(255,0,0))
            await robot.stop.sound()
    





        

# start the robot
robot.play()
